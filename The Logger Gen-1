# Table of Contents
- [Quick Start](#quick-start-2-minutes)
- [Critical: Validate Your Setup](#critical-validate-your-setup)
- [First Time? Start Here](#first-time-start-here)
- [Common Setup Mistakes](#common-setup-mistakes)
- [Daily Quick Reference](#daily-quick-reference)
- [Troubleshooting](#troubleshooting)
- [How to Know It's Working](#how-to-know-its-working)
- [Core Files & Templates](#core-files--templates)
  - [REFERENCE_INDEX.md](#reference_indexmd---project-reference-index)
  - [NEXT_TASK.md](#next_taskmd---what-should-i-work-on)
  - [TASK_TRACKER.md](#task_trackermd---where-did-i-leave-off)
  - [PRD.md](#prdmd---project-requirements-document)
  - [ERROR_LOGS.md](#error_logsmd---what-went-wrong--why)
  - [PROJECT_EVOLUTION.md](#project_evolutionmd---how-has-the-project-changed)
  - [PROJECT_FILES.md](#project_filesmd---file-reference--crud-tracking)
- [RULES.md ‚Äì Workflow & Semantic Tagging Rules](#rulesmd--workflow--semantic-tagging-rules)
- [FAQ](#faq)

---

## Tag Naming Convention
- Use **lowercase** and **hyphens** for multi-word tags (e.g., `feature`, `bug`, `user-auth`, `urgent`, `frontend`, `backend`).
- Be consistent to enable easy searching and filtering.

---

# Workflow-Based Intelligence System  
**Name:** The Logger gen-1

The Logger Gen-1 always checks for a `PRD.md` (Project Requirements Document) at the start of every session. If it doesn't exist, you'll be prompted to create one using the template below.  
The logger also ensures all other workflow files are present, creating them if missing. This guarantees you never start work without project vision and context.

---

## üö® If PRD.md is Missing: Use AI to Create It (Do This Outside Cursor!)

**Do NOT proceed until PRD.md exists.**

1. **Use ChatGPT (or any LLM) to get a high-level summary of your project:**
   - Paste your README, main code, or any available docs and ask:  
     _"Summarize the purpose, main features, and goals of this project."_

2. **Copy the summary to Claude (free version) and ask:**  
   _"Using this summary, create a Project Requirements Document (PRD) in markdown format with sections for Vision, Goals, Success Criteria, and Current Phase."_

3. **Review and edit the PRD draft to ensure it matches your project's intent.**

4. **Save the final version as `PRD.md` in your project root.**

5. **Only then proceed with the rest of the logger workflow.**

**Why?**  
- Cursor and most AI tools work best when a clear PRD is present.
- Creating the PRD outside Cursor ensures you have a strong, human-reviewed project vision before you start logging tasks or progress.

**Remember:**  
- The logger will not function as intended without a PRD.md.
- Always keep PRD.md up to date as your project evolves.

---

> This ensures every user, new or returning, always starts with a clear, AI-generated, and human-reviewed project vision!

---

## üéØ **The Flow Logic:**

1. **Check NEXT_TASK.md** ‚Üí What should I work on?
2. **Check TASK_TRACKER.md** ‚Üí Where did I leave off?
3. **Check PRD.md** ‚Üí Does current work align with vision?
4. **IF aligned** ‚Üí Execute next task
5. **IF misaligned** ‚Üí Check ERROR_LOGS.md + PROJECT_EVOLUTION.md to understand why
6. **Understand context** ‚Üí Plan ‚Üí Execute
7. **Update relevant files** based on what happened

---

## üöÄ **Quick Start (2 minutes)**

### **Step 1: Create Files**
```bash
touch REFERENCE_INDEX.md NEXT_TASK.md TASK_TRACKER.md PRD.md ERROR_LOGS.md PROJECT_EVOLUTION.md PROJECT_FILES.md
```

### **Step 2: Start Your Workflow**
1. **Create and fill out REFERENCE_INDEX.md first** (see template below)
2. **Define your vision** in PRD.md
3. **Set your next task** in NEXT_TASK.md
4. **Track your progress** in TASK_TRACKER.md
5. **Follow the flow logic** above
6. **Use semantic tags in every entry** (see templates for the `Tags:` field)

---

## üö® **Critical: Validate Your Setup**
After creating files, verify:
- [ ] REFERENCE_INDEX.md exists and has content
- [ ] PRD.md exists and has content
- [ ] All 7 files are in project root
- [ ] You can access all files quickly
- [ ] Templates are populated (not empty)
- [ ] **Semantic tags are present in every entry** (check for `Tags:` fields)

---

## üéØ **First Time? Start Here**
1. **Create files** using the touch command
2. **Copy templates** from this document into each file
3. **Fill REFERENCE_INDEX.md first** - this is mandatory
4. **Fill PRD.md**
5. **Set one simple task** in NEXT_TASK.md
6. **Start TASK_TRACKER.md** with today's date
7. **Begin working** and update as you go
8. **Add tags to every entry** (e.g., `Tags: feature, urgent`)

---

## ‚ö†Ô∏è **Common Setup Mistakes**
- **Empty files**: Don't leave templates empty - copy the content
- **Wrong location**: Files must be in project root
- **Skipping PRD**: You cannot proceed without PRD.md
- **No daily routine**: Update TASK_TRACKER.md throughout the day
- **Missing tags**: Every entry in your workflow files should have a `Tags:` field

---

## üìã **Daily Quick Reference**
**Morning:**
- Check NEXT_TASK.md
- Open TASK_TRACKER.md
- Quick PRD alignment check
- **Review tags in your entries**

**During work:**
- Update TASK_TRACKER.md every 30 min
- Log errors immediately
- Update PROJECT_FILES.md for file changes
- **Add/update tags as needed**

**Evening:**
- Complete TASK_TRACKER.md
- Set tomorrow's task in NEXT_TASK.md
- Quick alignment review
- **Check that all new entries have tags**

---

## üîß **Troubleshooting**
**"I don't know what to work on"**
- Check PRD.md for vision
- Review ERROR_LOGS.md for patterns
- Check PROJECT_EVOLUTION.md for changes

**"I keep getting stuck"**
- Are you following the flow logic?
- Have you logged recent errors?
- Is your current task in NEXT_TASK.md?

**"The system feels like overhead"**
- Start with just 3 files: PRD.md, NEXT_TASK.md, TASK_TRACKER.md
- Update TASK_TRACKER.md only when you stop/start
- Add other files as you need them

---

## üåü **How to Know It's Working**
You'll know the system is working when:
- You never ask "what was I working on?"
- You catch alignment issues before they become problems
- You can explain your project vision in 30 seconds
- You have a clear record of what went wrong and how you fixed it
- New team members can understand your project immediately

---

## üìã **Core Files & Templates**

### **REFERENCE_INDEX.md** - Project Reference Index
```markdown
# Project Reference Index

## All Project Files
- [List every file in the project here, with a short description] **Tags:** [core, workflow, backend]

## File Relationships
- [Document how files connect, depend on, or interact with each other] **Tags:** [dependency, data-flow]

## Recent File Changes
- [Date] - [File] - [Action: Created/Modified/Deleted] - [Reason] **Tags:** [update, refactor]

---
*This file is your master reference index. Always update REFERENCE_INDEX.md whenever a new file is added, modified, or deleted. Use semantic tags for every entry. Check this file first when you need to find a file, understand file relationships, or get full/multi-file context.*
```

### **NEXT_TASK.md** - What Should I Work On?
```markdown
# Next Task

## Current Priority
**Task**: [What you're working on right now]
**Why**: [Why this is the priority]
**Expected Outcome**: [What success looks like]
**Tags:** [feature, urgent, backend]  # Example tags

## Queue
- [ ] [Next task 1] **Tags:** [refactor, low-priority]
- [ ] [Next task 2] **Tags:** [frontend, enhancement]
- [ ] [Next task 3] **Tags:** [bug, critical]

## Blocked By
- [Any blockers preventing progress]

---
*Update this whenever you complete a task or priorities change.*
```

### **TASK_TRACKER.md** - Where Did I Leave Off?
```markdown
# Task Tracker

## Today's Work
**Date**: [Date]
**Started**: [Time]
**Current Task**: [What you're working on]
**Tags:** [feature, backend, in-progress]

## Progress Log
- [Time] - [What you did] **Tags:** [setup, config]
- [Time] - [What you did] **Tags:** [bugfix, urgent]
- [Time] - [What you did] **Tags:** [docs, update]

## Completed Today
- [ ] [Task 1] - [Notes] **Tags:** [feature, done]
- [ ] [Task 2] - [Notes] **Tags:** [refactor, completed]

## Left Off At
- [Exactly where you stopped]
- [What you were about to do next]

---
*Update this throughout your work session.*
```

### **PRD.md** - Project Requirements Document
```markdown
# Project Requirements Document

## Vision
**What are we building?**: [Clear description]
**Why are we building it?**: [Purpose and motivation]
**Who is it for?**: [Target users]
**Tags:** [vision, planning, ai-assistant]

## Goals
- [Goal 1] **Tags:** [mvp, must-have]
- [Goal 2] **Tags:** [scalability, future]
- [Goal 3] **Tags:** [usability, user-experience]

## Success Criteria
- [ ] [Criterion 1] **Tags:** [acceptance, test]
- [ ] [Criterion 2] **Tags:** [performance, metric]
- [ ] [Criterion 3] **Tags:** [user-feedback, review]

## Current Phase
**Phase**: [Setup/Development/Testing/Deployment]
**Focus**: [What we're prioritizing right now]
**Tags:** [phase, focus]

---
*This is your project vision. Check alignment before major decisions.*
```

### **ERROR_LOGS.md** - What Went Wrong & Why?
```markdown
# Error Logs

## [Date] - [Error Description]
**What Happened**: [Description]
**Why It Happened**: [Root cause]
**How I Fixed It**: [Solution]
**How to Prevent**: [Prevention strategy]
**Alignment Check**: [Did this affect project vision?]
**Tags:** [bug, urgent, backend]

## [Date] - [Error Description]
**What Happened**: [Description]
**Why It Happened**: [Root cause]
**How I Fixed It**: [Solution]
**How to Prevent**: [Prevention strategy]
**Alignment Check**: [Did this affect project vision?]
**Tags:** [frontend, minor, resolved]

---
*Log errors immediately. Use for alignment checks.*
```

### **PROJECT_EVOLUTION.md** - How Has the Project Changed?
```markdown
# Project Evolution

## [Date] - [Change Description]
**What Changed**: [What was modified/added/removed]
**Why It Changed**: [Reason for the change]
**Impact on Vision**: [How this affects the original plan]
**New Requirements**: [Any new needs that emerged]
**Tags:** [refactor, feature, scope]

## [Date] - [Change Description]
**What Changed**: [What was modified/added/removed]
**Why It Changed**: [Reason for the change]
**Impact on Vision**: [How this affects the original plan]
**New Requirements**: [Any new needs that emerged]
**Tags:** [feature, scope, enhancement]

---
*Track how your project evolves from the original vision.*
```

### **PROJECT_FILES.md** - File Reference & CRUD Tracking
```markdown
# Project Files Reference

## Core Workflow Files
- `NEXT_TASK.md` - Current task and priorities
- `TASK_TRACKER.md` - Daily progress tracking
- `PRD.md` - Project vision and requirements
- `ERROR_LOGS.md` - Error tracking and solutions
- `PROJECT_EVOLUTION.md` - Project change history
- `PROJECT_FILES.md` - This file (file reference)
- `REFERENCE_INDEX.md` - Master reference index

## Project Files
- [List all project files here] **Tags:** [core, workflow, backend]

## File Relationships
- [Document how files connect and depend on each other] **Tags:** [dependency, data-flow]

## Recent File Changes
- [Date] - [File] - [Action: Created/Modified/Deleted] - [Reason] **Tags:** [update, refactor]

---
*This file is your **reference index** for the project. Always check PROJECT_FILES.md when you need to find a file, understand file relationships, or get full/multi-file context. Update whenever files are created, modified, or deleted.*
```

---

# RULES.md ‚Äì Workflow & Semantic Tagging Rules

```markdown
# Logger Gen-1 Rules

## 1. Semantic Tagging
- Every entry in NEXT_TASK.md, TASK_TRACKER.md, ERROR_LOGS.md, and PROJECT_EVOLUTION.md should include a **Tags:** field.
- Tags should be short keywords or phrases that describe the context, topic, or type of entry (e.g., `auth`, `bug`, `feature`, `urgent`, `frontend`, `backend`).
- This enables fast searching, filtering, and AI understanding.

## 2. File Creation & CRUD
- Whenever a new file is created, modified, or deleted, update PROJECT_FILES.md and include semantic tags for the file's purpose and relationships.

## 3. PRD Enforcement
- The logger must not proceed unless PRD.md exists and is up to date.

## 4. Flow Logic Enforcement
- Always follow the flow logic as described in the main documentation.
- If a new workflow pattern emerges, add it to this RULES.md file.

---
```

---

## üîÑ **The Workflow in Action**

### **Starting Your Day**
1. **Open NEXT_TASK.md** - See what you should work on
2. **Open TASK_TRACKER.md** - Remember where you left off
3. **Quick PRD check** - Ensure alignment with vision
4. **Start working** - Execute your next task

### **File CRUD Operations**
**When you create a new file:**
1. **Create the file**
2. **Update PROJECT_FILES.md** - Add to "Project Files" section
3. **Update PROJECT_FILES.md** - Add to "Recent File Changes"
4. **Update PROJECT_FILES.md** - Document relationships if any

**When you modify a file:**
1. **Make your changes**
2. **Update PROJECT_FILES.md** - Add to "Recent File Changes"
3. **Update PROJECT_FILES.md** - Update relationships if changed

**When you delete a file:**
1. **Delete the file**
2. **Update PROJECT_FILES.md** - Remove from "Project Files" section
3. **Update PROJECT_FILES.md** - Add to "Recent File Changes"
4. **Update PROJECT_FILES.md** - Remove from relationships

### **During Work**
1. **Update TASK_TRACKER.md** as you progress
2. **Log errors** in ERROR_LOGS.md immediately
3. **Note changes** in PROJECT_EVOLUTION.md if vision shifts
4. **Update PROJECT_FILES.md** when creating/modifying/deleting files
5. **Check alignment** if you feel stuck

### **When You Get Stuck**
1. **Check ERROR_LOGS.md** - Have you seen this before?
2. **Check PROJECT_EVOLUTION.md** - Has the vision changed?
3. **Re-read PRD.md** - Are you still aligned?
4. **Update NEXT_TASK.md** - Adjust priorities if needed

### **End of Day**
1. **Complete TASK_TRACKER.md** - Document where you stopped
2. **Update NEXT_TASK.md** - Set tomorrow's priority
3. **Review alignment** - Are you still on track?

---

## üéØ **Alignment Checks**

### **Before Major Decisions**
- **Check PRD.md** - Does this align with vision?
- **Check ERROR_LOGS.md** - Have we tried this before?
- **Check PROJECT_EVOLUTION.md** - How has the project changed?

### **When Feeling Lost**
- **Re-read PRD.md** - What are we actually building?
- **Check NEXT_TASK.md** - What should I focus on?
- **Review ERROR_LOGS.md** - What patterns am I repeating?

### **When Priorities Feel Wrong**
- **Check PROJECT_EVOLUTION.md** - Has the vision evolved?
- **Update PRD.md** if needed - Is the vision still correct?
- **Adjust NEXT_TASK.md** - Set new priorities

---

## ü§ñ **AI Assistant Integration**

### **For Cursor/Claude/GPT**
When working with AI assistants:

1. **Share PRD.md** - Give them your vision
2. **Share NEXT_TASK.md** - Tell them your current focus
3. **Share TASK_TRACKER.md** - Show them where you left off
4. **Share PROJECT_FILES.md** - Show them all project files and relationships
5. **Ask for alignment check** - "Does this align with our vision?"
6. **Update files** based on their suggestions
7. **Update PROJECT_FILES.md** if they suggest new files or changes

### **AI Communication Template**
```
"Here's my project vision (PRD.md), my current task (NEXT_TASK.md), 
where I left off (TASK_TRACKER.md), and all project files (PROJECT_FILES.md). 

Can you help me with [specific question] while ensuring 
we stay aligned with the vision?"
```

---

## üí° **Pro Tips**

### **Keep It Simple**
- **Update TASK_TRACKER.md** every 30 minutes
- **Log errors immediately** - don't wait
- **Check alignment** when you feel stuck
- **Trust the flow** - it works

### **When to Update Each File**
- **NEXT_TASK.md** - When priorities change
- **TASK_TRACKER.md** - Throughout your work session
- **PRD.md** - When vision changes (rarely)
- **ERROR_LOGS.md** - When something breaks
- **PROJECT_EVOLUTION.md** - When requirements change
- **PROJECT_FILES.md** - When files are created, modified, or deleted

### **Signs You're Off Track**
- You haven't checked PRD.md in days
- You're working on tasks not in NEXT_TASK.md
- You keep making the same errors
- You can't remember where you left off

---

## üåü **Why This Works**

### **Clear Decision Points**
- **What to work on** (NEXT_TASK.md)
- **Where you are** (TASK_TRACKER.md)
- **Why you're doing it** (PRD.md)
- **What went wrong** (ERROR_LOGS.md)
- **How things changed** (PROJECT_EVOLUTION.md)

### **Built-in Alignment Checks**
- **Vision alignment** before major decisions
- **Error pattern recognition** to prevent repeats
- **Evolution tracking** to understand changes
- **Progress visibility** to stay motivated

### **AI-Friendly Structure**
- **Clear context** for AI assistants
- **Structured information** they can understand
- **Alignment checks** they can help with
- **Progress tracking** they can reference

---

## üöÄ **Get Started Now**

1. **Create the 7 files** using the templates above
2. **Fill out PRD.md** with your project vision
3. **Set your first task** in NEXT_TASK.md
4. **Start working** and follow the flow logic
5. **Trust the system** - it will guide you

---

*This workflow-based intelligence system transforms any project into a guided, aligned, and continuously improving experience.*

**The flow logic creates clear decision points and built-in alignment checks that prevent you from getting lost or working on the wrong things.** 

## FAQ

**Q: How do I find all files related to a feature or bug?**
A: Check REFERENCE_INDEX.md and look for tags or relationships. Use the tags and relationships sections to quickly locate all relevant files.

**Q: What if I need to understand how multiple files work together?**
A: REFERENCE_INDEX.md documents file relationships. Review the "File Relationships" section for dependencies and data flow.

**Q: What tags should I use?**
A: Use short, descriptive, lowercase tags. For multi-word tags, use hyphens (e.g., `user-auth`, `data-import`). See the Tag Naming Convention above for details.

**Q: What if I forget to add tags?**
A: Review the onboarding and daily checklists‚Äîthey remind you to add tags to every entry. Tags are required for searchability and AI context.

**Q: How do I get full project context?**
A: Always start with REFERENCE_INDEX.md to see the big picture, then open the specific files listed there. Use tags to filter and find what you need. 

# Project Intelligence System - ASCII Flowchart

```
                            ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
                            ‚îÇ     üìö REFERENCE_INDEX.md      ‚îÇ
                            ‚îÇ    Master File Index &         ‚îÇ
                            ‚îÇ      Semantic Tags             ‚îÇ
                            ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                          ‚îÇ
                          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
                          ‚îÇ               ‚îÇ               ‚îÇ
              ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îê       ‚îå‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îê       ‚îå‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
              ‚îÇ ‚è≠Ô∏è NEXT_TASK   ‚îÇ      ‚îÇ üìä    ‚îÇ       ‚îÇ üéØ PRD.md      ‚îÇ
              ‚îÇ     .md        ‚îÇ       ‚îÇ TASK_ ‚îÇ       ‚îÇ Project Vision ‚îÇ
              ‚îÇ Current &      ‚îÇ       ‚îÇ TRACK ‚îÇ       ‚îÇ & Goals        ‚îÇ
              ‚îÇ Next Tasks     ‚îÇ       ‚îÇ ER.md ‚îÇ       ‚îÇ                ‚îÇ
              ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò       ‚îî‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îò       ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                    ‚îÇ                     ‚îÇ                 ‚îÇ
                    ‚îÇ                     ‚îÇ                 ‚îÇ
          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îê              ‚îå‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îê        ‚îå‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
          ‚îÇ üö® ERROR_  ‚îÇ              ‚îÇ üìà     ‚îÇ        ‚îÇ üìÅ PROJECT_  ‚îÇ
          ‚îÇ LOGS.md    ‚îÇ              ‚îÇ PROJ_  ‚îÇ        ‚îÇ FILES.md     ‚îÇ
          ‚îÇ Problems & ‚îÇ              ‚îÇ EVOL.  ‚îÇ        ‚îÇ Workflow     ‚îÇ
          ‚îÇ Solutions  ‚îÇ              ‚îÇ md     ‚îÇ        ‚îÇ File List    ‚îÇ
          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò              ‚îî‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îò        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                ‚îÇ                         ‚îÇ                   ‚îÇ
                ‚îÇ                         ‚îÇ                   ‚îÇ
                ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                          ‚îÇ                     ‚îÇ
                          ‚ñº                     ‚ñº
                 ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
                 ‚îÇ     ü§ñüë§ AI Assistant /             ‚îÇ
                 ‚îÇ        Human User                   ‚îÇ
                 ‚îÇ   Central Hub for All               ‚îÇ
                 ‚îÇ   Workflow Interactions             ‚îÇ
                 ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                               ‚îÇ
            ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
            ‚îÇ                  ‚îÇ                  ‚îÇ
            ‚ñº                  ‚ñº                  ‚ñº
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇüîç CONSULTS  ‚îÇ    ‚îÇ‚úèÔ∏è UPDATES   ‚îÇ    ‚îÇ‚úÖ CHECKS    ‚îÇ
    ‚îÇREFERENCE_   ‚îÇ    ‚îÇNEXT_TASK &  ‚îÇ    ‚îÇALIGNMENT    ‚îÇ
    ‚îÇINDEX.md     ‚îÇ    ‚îÇTASK_TRACKER ‚îÇ    ‚îÇwith PRD.md  ‚îÇ
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
            
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇüêõ LOGS      ‚îÇ    ‚îÇüìã RECORDS   ‚îÇ    ‚îÇüìö REFERENCES‚îÇ
    ‚îÇISSUES in    ‚îÇ    ‚îÇCHANGES in   ‚îÇ    ‚îÇFILES in     ‚îÇ
    ‚îÇERROR_LOGS   ‚îÇ    ‚îÇPROJECT_EVOL ‚îÇ    ‚îÇPROJECT_FILES‚îÇ
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

                        üéØ WORKFLOW FLOW LOGIC
                        
1. Check NEXT_TASK.md     ‚Üí  What should I work on?
2. Check TASK_TRACKER.md  ‚Üí  Where did I leave off?
3. Check PRD.md          ‚Üí  Does current work align with vision?
4. IF aligned           ‚Üí  Execute next task
5. IF misaligned        ‚Üí  Check ERROR_LOGS.md + PROJECT_EVOLUTION.md
6. Understand context   ‚Üí  Plan ‚Üí Execute
7. Update relevant files ‚Üí  Based on what happened

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

                       üìã CONNECTION TYPES
                       
üî¥ Master Control:  REFERENCE_INDEX.md ‚Üí All Files
üü¢ Consultation:   User ‚Üî REFERENCE_INDEX.md  
üîµ Updates:        User ‚Üí NEXT_TASK.md & TASK_TRACKER.md
üü† Alignment:      User ‚Üî PRD.md
üî¥ Error Logging:  User ‚Üí ERROR_LOGS.md
üü£ Evolution:      User ‚Üí PROJECT_EVOLUTION.md  
üî∑ File Reference: User ‚Üî PROJECT_FILES.md

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

                    üåü PROJECT INTELLIGENCE BENEFITS
                    
‚úì Never lose context or forget where you left off
‚úì Maintain alignment with project vision at all times  
‚úì Track errors and solutions for continuous improvement
‚úì Document project evolution and decision history
‚úì Enable instant onboarding for new team members
‚úì Create AI-ready environment with semantic tagging
‚úì Provide structured workflow for human-AI collaboration
```
